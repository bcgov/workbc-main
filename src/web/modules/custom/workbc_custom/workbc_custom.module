<?php

use Drupal\Core\Access\AccessResult;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;

/**
 *
 */

 function workbc_custom_theme($existing, $type, $theme, $path) {
   return [
     'related_topics_block' => [
       'variables' => [
           'related_topics' => array(
               'image' => NULL,
               'top_level_parent' => NULL,
               'title' => NULL,
               'body' => NULL,
               'action' => NULL,
           ),
       ],
     ],
     'explore_careers_block' => [
       'variables' => [
           'explore_careers' => array(
               'title' => NULL,
               'body' => NULL,
               'title_1' => NULL,
               'body_1' => NULL,
               'action_1' => NULL,
               'tooltip_1' => NULL,
               'title_2' => NULL,
               'body_2' => NULL,
               'action_2' => NULL,
           ),
       ],
     ],
     'career_events_block' => [
       'variables' => [
           'career_events' => array(
             'list' => NULL,
             'calendar' => NULL,
           ),
       ],
     ],
   ];
 }


 /**
  * Implements hook_views_data_alter().
  */
 function workbc_custom_views_data_alter(array &$data) {

   $data['node_field_data']['workbc_nodes_granular_dates'] = [
     'title' => t('WorkBC node granular date filter'),
     'filter' => [
       'title' => t('WorkBC node granular date filter'),
       'help' => t('WorkBC node granular date filter.'),
       'field' => 'title',
       'id' => 'workbc_node_granular_date_filter',
     ],
   ];

 }


function workbc_custom_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // hide password and disable editing of username and email
  // maintenance of this info is handled by keycloak
  if ($form_id == "user_form") {
    $form['account']['mail']['#disabled'] = true;
    $form['account']['name']['#disabled'] = true;
    $form['account']['pass']['#access'] = false;
    $form['account']['mail']['#description'] = "";

    $user = \Drupal::currentUser();
    if (!$user->hasPermission("bypass content groups")) {
      $form['field_content_group']['#disabled'] = true;
    }
    // allow edit if super user
    if ($user->id() == 1) {
      $form['account']['name']['#disabled'] = false;
      $form['account']['mail']['#disabled'] = false;
    }
  }


  if($form_id == "hoo_options"){
    $form['#attached']['library'][] =  'workbc_custom/custom-script';
  }

}


/**
 * Implements hook_node_access
 *
 */
function workbc_custom_node_access(NodeInterface $node, $op, AccountInterface $account) {

  // we only allow update/delete of node if user is a member of the same content group
  // as the node or the user has "bypass content groups" permission.
  if ($op == "update" || $op == "delete") {
    if (!$account->hasPermission("bypass content groups")) {
      $user = \Drupal\user\Entity\User::load($account->id());
      if (!isset($user->field_content_group->target_id) ||
          !isset($node->field_content_group->target_id) ||
          $user->field_content_group->target_id <> $node->field_content_group->target_id) {
        return  AccessResult::forbidden();
      }
    }
  }
  return AccessResult::neutral();
}


/**
 * Implements hook_node_presave().
 */
function workbc_custom_node_presave(NodeInterface $entity) {

  // if this is a new node and user doesn't have bypass content groups hasPermission
  // we set the content group for the node to the same group as the user.
  if ($entity->isNew()) {
    if (!\Drupal::currentUser()->hasPermission('bypass content groups')) {
      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      if (isset($user->field_content_group->target_id)) {
        $entity->get('field_content_group')->setValue($user->field_content_group->target_id);
      }
    }
  }
}


function workbc_custom_user_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {

  // users without "bypass content groups" permission can only update/delete
  // user accounts if they are members of the same content group
  if ($operation == "update" || $operation == "delete") {
    if (!\Drupal::currentUser()->hasPermission('bypass content groups')) {
      $admin = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      if (!isset($admin->field_content_group->target_id) ||
          is_null($admin->field_content_group) ||
          !isset($entity->field_content_group->target_id) ||
          is_null($entity->field_content_group) ||
          $admin->field_content_group->target_id <> $entity->field_content_group->target_id) {
        return  AccessResult::forbidden();
      }
    }
  }
  // No opinion.
  return AccessResult::neutral();
}


function workbc_custom_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {

  // remove role operation, roles can be changed via edit tab.
  // this operation is unnecessary and gives certain users access when they shouldn't
  if ($entity->getEntityTypeId() == "user") {
    if (isset($operations['role_delegation'])) {
      unset($operations['role_delegation']);
    }
  }
}


function workbc_custom_menu_local_tasks_alter(&$data, $route_name) {

  // remove role tab, roles can be changed via edit tab.
  // this operation is unnecessary and gives certain users access when they shouldn't
  if (isset($data['tabs'][0]['role_delegation.edit_form'])) {
    unset($data['tabs'][0]['role_delegation.edit_form']);
  }
}


/**
 * Get SSOT data for the High Opportunity block. 
 */
function ssotHighOpportunityOptions($parameters = null){
  $data = array();
  $data['data'] = querySSoT('high_opportunity_occupations?' . $parameters);

  //options
  $data['options'] = querySSoT('high_opportunity_occupations?select=occupational_interest,typical_education_background,region,wage_rate_median');

  return $data;
}

/**
 * Function to get the region mappings.
 */ 
function getRegionMappings() {
    $region_map = [
            'all' => 'All regions',
            'british_columbia' => 'British Columbia',
            'vancouver_island_coast' =>'Vancouver Island/Coast',
            'mainland_southwest'  => 'Mainland/Southwest',
            'thompson_okanagan' => 'Thompson-Okanagan',
            'kootenay' => 'Kootenay',
            'cariboo' => 'Cariboo',
            'north_coast_nechako' => 'North Coast and Nechako',
            'northeast' => 'Northeast'
          ];
    return $region_map;
  }