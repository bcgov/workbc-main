<?php

  /**
   * @file
   *  Calendar Listview module to create list-view feature for calendar. 
   */

  use Symfony\Component\HttpFoundation\RedirectResponse;
  use Drupal\Core\Url;
  use Drupal\Core\Cache\Cache;
  use Drupal\node\Entity\Node;
  use Drupal\views\ViewExecutable;
   

function calendar_listview_page_attachments_alter(array &$attachments) {  
	$attachments['#attached']['library'][] = 'calendar_listview/calendar-listview-lib';
}

function calendar_listview_theme($existing, $type, $theme, $path) {
  return [
    'views_view_unformatted__calendar' => [
      'template' => 'views-unformatted--calendar-block-1',
      'base hook' => 'view'
    ],
    'views_mini_pager__event_calendar_listview__block_1' => [
      'template' => 'views-mini-pager--calendar--block-1',
      'base hook' => 'view'
    ],
    'views_mini_pager__event_calendar_listview__block_2' => [
      'template' => 'views-mini-pager--calendar--block-2',
      'base hook' => 'view'
    ],
    'views_view__fullcalendar' => [
      'template' => 'views-view-fullcalendar',
      'base hook' => 'view'
    ],
    'calendarviewmode' => [
      'template' => 'calendar--viewmode',
      'variables' => [
        'viewmode' => NULL,
      ]
    ],
    'views_view_fields__event_calendar_listview__block_1' => [
      'template' => 'fields/views-view-fields-calendar-block-1',
      'base hook' => 'view'
    ],
    'views_view_fields__event_calendar_listview__block_2' => [
      'template' => 'fields/views-view-fields-calendar-block-1',
      'base hook' => 'view'
    ],
    'node__page__calendar' => [
      'template' => 'node--page--calendar',
      'base hook' => 'node',
      'variables' => [
        'viewmode' => null,
      ],
    ],
  ];
}

function calendar_listview_theme_suggestions_page_alter(array &$suggestions, array $variables){
	if ($view = \Drupal::routeMatch()->getParameter('view_id')) {
		$display_id = \Drupal::routeMatch()->getParameter('display_id');
		$suggestions[] = 'page__' . $view . '--' . $display_id;
	}
	if ($node = \Drupal::routeMatch()->getParameter('node')) {
		$suggestions[] = 'page__' . $node->bundle().'_'.$node->id();
		$suggestions[] = 'page__' . $node->bundle();
	}
}

function calendar_listview_preprocess_node(&$variables) {
  $nid = $variables['node']->id();
  $current_path = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$nid);
    $variables['#cache']['max-age'] = 0;
    $mode = \Drupal::request()->query->get('mode');
    $mode = (!empty($mode))? $mode : "calendar";
    $variables['viewmode'] = $mode;
}


/**
 * {@inheritdoc}
*/
function calendar_listview_form_node_form_alter(&$form, $formState, $form_id) {
  if($form_id == 'node_event_form' || $form_id == 'node_event_edit_form'){
    $form['field_end_date']['#required'] = TRUE;
    $form['#validate'][] = 'validateEventForm';
  }
}

/**
 * {@inheritdoc}
*/

function validateEventForm($form, &$form_state) {
  $start_date = $form_state->getValue('field_start_date')[0]['value'];
  $end_date = $form_state->getValue('field_end_date')[0]['value'];
  $event_start_date = strtotime($start_date->format('Y-m-d H:i:s'));
  $event_end_date = strtotime($end_date->format('Y-m-d H:i:s'));
  if($event_end_date < $event_start_date){
    $form_state->set('field_end_date', TRUE);
    $form_state->setErrorByName('field_end_date', 'Event End Date must not be smaller than the Event Start Date.');
  }else if ($event_end_date == $event_start_date){
    $start_time = $form_state->getValue('field_time')[0]['from'];
    $end_time = $form_state->getValue('field_time')[0]['to'];
    if($end_time < $start_time){
      $form_state->set('field_time', TRUE);
      $form_state->setErrorByName('field_time', 'Event End Time must not be smaller than the Event Start Time.');
    }
  }
}
