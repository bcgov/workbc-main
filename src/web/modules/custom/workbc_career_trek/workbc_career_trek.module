<?php
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\Sql;

/**
 * Implements hook_views_pre_view().
 */
function workbc_career_trek_preprocess_views_view(&$variables) {
  // Check if it's the view you want to target
  $view = $variables['view'];
  if ($view->id() == 'career_trek_video_library' && $view->current_display == 'block_1') {
    // Get the exposed filter input value
    $values = [];
    $filters = $view->display_handler->getOption('filters');
    if ($exposed = $view->getExposedInput()) {
      foreach ($exposed as $key => $expose) {
        if ($key == "field_skills_2") {
          foreach($expose as $row) {
            $term = Term::load($row);
            if ($term && !empty($term->getName())) {
              $values[] = $term->getName();
            }
          }
        } elseif ($key == "occupational_category_api_field") {
          foreach($expose as $exp) {
            $title = $filters['occupational_category_api_field']['group_info']['group_items'][$exp]['title'] ?? '';
            if (!empty($title)) {
              $values[] = $title;
            }
          }
          
        }
         elseif ($key == "minimum_education_all") {
          $title = $filters['minimum_education']['group_info']['group_items'][$expose]['title'] ?? '';
          if (!empty($title)) {
            $values[] = $title;
          }
        } elseif ($key == "regions") {
          $title = $filters['region_api_field']['group_info']['group_items'][$expose]['title'] ?? '';
          if (!empty($title)) {
            $values[] = $title;
          }
        } elseif ($key == "annual_salary") {

          if(isset($expose['value']) && !empty($expose['value']) && $exposed['annual_salary_op'] != "between") {
            $min = $expose['value'];
            $max = 140000 .  "+";
            if (!empty($min) || !empty($max)) {
              $values[] = "Salary $" . $min . " - $" . $max;
            }
          }else{
            $min = $expose['min'] ?? '';
            $max = $expose['max'] ?? '';
            if (!empty($min) || !empty($max)) {
              $values[] = "Salary $" . $min . " - $" . $max;
            }
          }
        } else {
          if (!empty($expose) && $key != "reset" && $key != "annual_salary_op") {
            $values[] = $expose;
          }
        }
      }
      $variables['search_view'] = array_filter($values);
    }
    $variables['view_title'] = $view->getTitle();
  }
}

/**
 * Implements hook_uninstall().
 */
function workbc_career_trek_uninstall() {
    // Load the entity type manager service.
    $entity_type_manager = \Drupal::entityTypeManager();
  
    // Load and remove paragraph items of type 'section_icons_1_3' before removing its fields and type.
    $paragraph_items = $entity_type_manager->getStorage('paragraph')->loadByProperties(['type' => 'section_icons_1_3']);
    foreach ($paragraph_items as $paragraph_item) {
      $paragraph_item->delete();
    }
    if ($paragraph_type = $entity_type_manager->getStorage('paragraphs_type')->load('section_icons_1_3')) {
      $field_definitions = $entity_type_manager->getStorage('field_config')->loadByProperties(['entity_type' => 'paragraph', 'bundle' => 'section_icons_1_3']);
      foreach ($field_definitions as $field_definition) {
        $field_definition->delete();
      }
      $paragraph_type->delete();
    }
  
    // Load and remove paragraph items of type 'banner_video' before deleting its fields and type.
    $paragraph_items = $entity_type_manager->getStorage('paragraph')->loadByProperties(['type' => 'banner_video']);
    foreach ($paragraph_items as $paragraph_item) {
      $paragraph_item->delete();
    }
    // Load the paragraph type 'section_icons_1_3' and remove its fields.
    if ($paragraph_type = $entity_type_manager->getStorage('paragraphs_type')->load('section_icons_1_3')) {
      $field_definitions = $entity_type_manager->getStorage('field_config')->loadByProperties(['entity_type' => 'paragraph', 'bundle' => 'section_icons_1_3']);
      foreach ($field_definitions as $field_definition) {
        $field_definition->delete();
      }
      $paragraph_type->delete();
    }
  
    // Load the paragraph type 'banner_video' and delete its fields.
    if ($paragraph_type = $entity_type_manager->getStorage('paragraphs_type')->load('banner_video')) {
      $field_storage_definitions = $entity_type_manager->getStorage('field_storage_config')->loadByProperties(['entity_type' => 'paragraph', 'bundle' => 'banner_video']);
      foreach ($field_storage_definitions as $field_storage_definition) {
        $field_storage_definition->delete();
      }
      $paragraph_type->delete();
    }

    // Remove views from the website.
    $views_to_remove = [
      'banner_video',
      'career_trek_video_library',
      'related_careers_videos',
    ];
    foreach ($views_to_remove as $view_id) {
      if ($view = $entity_type_manager->getStorage('view')->load($view_id)) {
        $view->delete();
      }
    }

    // Remove the simple block 'find_resources_for_educators'.
    if ($block = $entity_type_manager->getStorage('simple_block')->load('find_resources_for_educators')) {
      $block->delete();
    }

    // Remove the search API server 'solr_search'.
    if ($server = $entity_type_manager->getStorage('search_api_server')->load('solr_search')) {
      $server->delete();
    }

    // Remove the search API index 'career_profile_index'.
    if ($index = $entity_type_manager->getStorage('search_api_index')->load('career_profile_index')) {
      $index->delete();
    }
}

/**
 * Implements hook_views_query_alter().
 */
function workbc_career_trek_views_query_alter(ViewExecutable $view, $query) {
  if ($view->id() === 'career_trek_videos' && $view->current_display === 'page_1') {
    if ($query instanceof \Drupal\views\Plugin\views\query\Sql) {
      // Get the contextual filter argument value.
      $argument = $view->args[0] ?? NULL;

      if (!empty($argument)) {
        // Loop through conditions and unset the one for title.
        foreach ($query->where as $group_id => $group) {
          foreach ($group['conditions'] as $index => $condition) {
            if (
              is_array($condition)
              && isset($condition['field'])
              && str_contains($condition['field'], 'title')
            ) {
              // Remove the default Views-added filter condition.
              unset($query->where[$group_id]['conditions'][$index]);
            }
          }
        }
        // Add our custom case-insensitive condition using LOWER().
        $query->addWhereExpression(
          0,
          "LOWER(
            TRIM(
              BOTH '-' FROM
                REGEXP_REPLACE(
                  REGEXP_REPLACE(
                    REPLACE(
                      REPLACE(
                        REPLACE(node_field_data.title, '/', ''),
                        ',', ''),
                      ' ',
                      '-'
                    ),
                    '[^a-zA-Z0-9-]',
                    '',
                    'g'
                  ),
                  '-+',
                  '-',
                  'g'
                )
            )
          ) = LOWER(:title)",
          [':title' => $argument]
        );
      }
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * We use hook_entity_view instead of hook_entity_load as we only need to load data from SSoT
 * for the node that is being displayed, not for nodes that are being referenced.
 */
function workbc_career_trek_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  if ($view_mode === "full_career_trek_videos") {
    if($entity->bundle() == "career_profile") {
      $entity->ssot_data = ssotFullCareerProfile($entity->get("field_noc")->getString());
    }
  }
}

function ssotFullCareerProfile($noc) {

  $data = array();
  if (!empty(querySSoT('wages?noc=eq.' . $noc))) {
    $data['wages'] = querySSoT('wages?noc=eq.' . $noc)[0];
    $data['career_provincial'] = querySSoT('career_provincial?noc=eq.' . $noc)[0];
    $data['career_regional'] = querySSoT('career_regional?noc=eq.' . $noc)[0];
    $data['census'] = querySSoT('census?noc=eq.' . $noc)[0];
    $data['education'] = querySSoT('education?noc=eq.' . $noc)[0];
    $data['skills'] = querySSoT('skills?noc=eq.' . $noc);
    $data['high_opportunity_occupations'] = querySSoT('high_opportunity_occupations?noc=eq.' . $noc);
    $data['occupational_interests'] = querySSoT('occupational_interests?noc=eq.' . $noc);
    $data['titles'] = querySSoT('titles?noc=eq.' . $noc);
    $data['career_trek'] = querySSoT('career_trek?noc_2021=eq.' . $noc);
    $data['occupational_category'] = querySSoT('fyp_categories_interests_nocs?noc_2021=eq.' . $noc);
    $opening_careers = querySSoT('openings_careers?noc=eq.' . $noc);
    if (!empty($opening_careers)) {
      $data['openings_careers'] = $opening_careers[0];
    }
  }
  $data['industries'] = (is_array(querySSoT('industries'))) ? array_column(querySSoT('industries'), NULL, 'key') : [];
  $data['sources'] = ssotSources();
  $data['schema'] = ssotSchema();

  return $data;
}

/**
 * Implements hook_views_post_render().
 */
function workbc_career_trek_views_post_render($view) {
  /** @var \Drupal\views\ViewExecutable $view */
  if ($view->id() === 'career_trek_videos' && isset($view->args[0])) {
      // Get year from contextual argument of the view.
      $title = $view->args[0];

      // Prefix year to title.
      $title = (string) t('@title', ['@title' => $title]);

      // Set view and page titles.
      $view->setTitle($title);
  }
}

/**
*{@inheritdoc}
*/
function workbc_career_trek_theme($existing, $type, $theme, $path) {
  return [
    'career_trek_recent_jobs' => [
      'template' => 'career-trek-recent-jobs-block',
      'variables' => [
        'data' => [],
        'title' => '',
        'sub_title' => '',
        'no_of_records_to_show' => '',
        'total_result' => '',
        'no_result_text' => '',
        'readmore_label' => '',
        'jobboard_api_url_frontend' => '',
        'jobboard_api_url_backend' => '',
        'noc' => '',
        'find_job_url'=>'',
      ],
    ]
  ];
}

function workbc_career_trek_preprocess_breadcrumb(&$variables) {
  $route_match = \Drupal::service('current_route_match');
  $route_name = $route_match->getRouteName();

  if ($route_name === 'view.career_trek_videos.page_1') {
    $arg = $route_match->getRawParameter('arg_0');
    if ($arg) {
      $title = ucwords(str_replace('-', ' ', $arg));
      $breadcrumb = &$variables['breadcrumb'];
      if (!empty($breadcrumb)) {
        $breadcrumb[count($breadcrumb) - 1]['text'] = $title;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter the exposed filter form for the Career Trek Video Library block.
 */
function workbc_career_trek_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if($form['#id'] == "views-exposed-form-career-trek-video-library-block-1") {
    $form['annual_salary_wrapper']['#type'] = 'details';
    $form['annual_salary_wrapper']['#title'] = $form['annual_salary_wrapper']['annual_salary_wrapper']['#title'];
    $form['annual_salary_wrapper']['#description'] = $form['annual_salary_wrapper']['annual_salary_wrapper']['#description'];
  }
}
