<?php

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;

define ("WORKBC_EXTRA_FIELDS_NOT_AVAILABLE", "n/a");

define ("WORKBC_BC_MAP_WITH_LABELS", "bc-map-labels.png");
define ("WORKBC_BC_MAP", "bc-map.png");

define ("REGION_CARIBOO", "Cariboo");
define ("REGION_KOOTENAY", "Kootenay");
define ("REGION_MAINLAND_SOUTHWEST", "Mainland/Southwest");
define ("REGION_NORTH_COAST_NECHAKO", "North Coast & Nechako");
define ("REGION_NORTHEAST", "Northeast");
define ("REGION_THOMPSON_OKANAGAN", "Thompson-Okanagan");
define ("REGION_VANCOUVER_ISLAND_COAST", "Vancouver Island-Coast");

define ('SSOT_PING_TIMEOUT', 5);


/*

we use hook_entity_view instead of hook_entity_load as we only need to load data from SSoT
for the node that is being displayed, not for nodes that are being referenced.


*/
function workbc_extra_fields_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  if ($view_mode == "full") {
    if (!querySSoT('', SSOT_PING_TIMEOUT)) {
      $entity->ssot_data = NULL;
      return;
    }

    switch($entity->bundle()) {
      case "career_profile":
        $entity->ssot_data = ssotCareerProfile($entity->get("field_noc")->getString());
        break;
      case "industry_profile":
      case "region_profile":
    }
  }
}

function ssotCareerProfile($noc) {

  $data = array();
  $data['wages'] = querySSoT('wages?noc=eq.' . $noc)[0];
  $data['career_provincial'] = querySSoT('career_provincial?noc=eq.' . $noc)[0];
  $data['career_regional'] = querySSoT('career_regional?noc=eq.' . $noc)[0];
  $data['census'] = querySSoT('census?noc=eq.' . $noc)[0];
  $data['education'] = querySSoT('education?noc=eq.' . $noc)[0];
  $data['skills'] = querySSoT('skills?noc=eq.' . $noc);
  $data['openings'] = querySSoT('openings?noc=eq.' . $noc)[0];
  $data['sources'] = ssotSources();
  return $data;
}

function ssotSources() {

  $sources = querySSoT('sources');
  if (!$sources) return [];

  return array_reduce($sources, function($ret, $source) {
    $ret[$source['endpoint']] = $source;
    return $ret;
  }, []);
}

function querySSoT($url, $read_timeout = NULL) {
  $ssot = rtrim(\Drupal::config('workbc')->get('ssot_url'), '/');
  $client = new Client();
  try {
    $options = [];
    if ($read_timeout) {
      $options['read_timeout'] = $read_timeout;
    }
    $response = $client->get($ssot . '/' . $url, $options);
    $result = json_decode($response->getBody(), TRUE);
    return $result;
  }
  catch (RequestException $e) {
    \Drupal::logger('workbc_extra_fields')->error($e->getMessage());
    return NULL;
  }
}
