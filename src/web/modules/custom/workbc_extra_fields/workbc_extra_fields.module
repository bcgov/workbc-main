<?php

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Drupal\views\ViewExecutable;

define ("WORKBC_EXTRA_FIELDS_NOT_AVAILABLE", "N/A");

define ("WORKBC_BC_MAP_WITH_LABELS", "bc-map-labels.png");
define ("WORKBC_BC_MAP", "bc-map.png");

define ("REGION_CARIBOO", "Cariboo");
define ("REGION_KOOTENAY", "Kootenay");
define ("REGION_MAINLAND_SOUTHWEST", "Mainland/Southwest");
define ("REGION_NORTH_COAST_NECHAKO", "North Coast and Nechako");
define ("REGION_NORTHEAST", "Northeast");
define ("REGION_THOMPSON_OKANAGAN", "Thompson-Okanagan");
define ("REGION_VANCOUVER_ISLAND_COAST", "Vancouver Island/Coast");

define ("REGION_BRITISH_COLUMBIA", "British Columbia");

define ('SSOT_PING_TIMEOUT', 5);


/*

we use hook_entity_view instead of hook_entity_load as we only need to load data from SSoT
for the node that is being displayed, not for nodes that are being referenced.

*/
function workbc_extra_fields_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  if ($view_mode === "full" || $view_mode === "search_index") {
    if (!querySSoT('', SSOT_PING_TIMEOUT)) {
      $entity->ssot_data = NULL;
      return;
    }

    switch($entity->bundle()) {
      case "labour_market_monthly":
        //Example: http://localhost:3000/monthly_labour_market_updates?year=eq.2022&month=eq.1
        $year = \Drupal::request()->query->get('year');
        $month = \Drupal::request()->query->get('month');
        $entity->ssot_data = ssotLabourMarketMonthly($year,$month);

        break;
      case "career_profile":
        $entity->ssot_data = ssotCareerProfile($entity->get("field_noc")->getString());
        break;
      case "industry_profile":
        $entity->ssot_data = ssotIndustryProfile($entity->getTitle());
        break;
      case "region_profile":
        $entity->ssot_data = ssotRegionProfile($entity->getTitle());
        break;
      case "bc_profile":
        $entity->ssot_data = ssotBCProfile($entity->getTitle());
        break;
    }
  }
}


function ssotLabourMarketMonthly($year = null, $month = null){
  $data = array();

  // Months years data for select list element on top of the page.
  $data['monthly_labour_market_updates_months_years'] = querySSoT('monthly_labour_market_updates?select=year%2Cmonth&order=year.desc%2Cmonth.desc');

  // Full data query.
  $parameters = 'order=year.desc%2Cmonth.desc';
  if(!empty($year)) {
    $parameters .= '&year=eq.' . $year;
  }
  if(!empty($month)) {
    $parameters .= '&month=eq.' . $month;
  }
  $data['monthly_labour_market_updates'] = querySSoT('monthly_labour_market_updates?' . $parameters);
  if(empty($data['monthly_labour_market_updates'])) {
    \Drupal::messenger()->addError('Chosen year and month has no data. Please select from the provided year and months dropdown.');
  }
  else {
    $currentYear = $data['monthly_labour_market_updates'][0]['year'];
    $currentMonth = $data['monthly_labour_market_updates'][0]['month'];
    $data['current_previous_months_names']= ssotGetPreviousMonthYear($currentMonth, $currentYear);
  }

  // Source metadata.
  $endpoint = 'monthly_labour_market_updates';
  $sources = querySSoT('sources?endpoint=eq.' . $endpoint);
  foreach($sources as $source) {
    $datapoint = !empty($source['datapoint'])?$source['datapoint']:'no-datapoint';
    $data['sources'][$datapoint] = $source['label'];
  }

  return $data;
}

function ssotBCProfile($region) {

  $region = ssotRegionKey($region);

  $data = array();

  $data['population'] = querySSoT('population?region=eq.' . $region)[0];
  $data['regional_labour_market_outlook'] = querySSoT('regional_labour_market_outlook?region=eq.british_columbia')[0];
  $data['labour_force_survey_bc_employment'] = querySSoT('labour_force_survey_regional_employment?region=eq.british_columbia')[0];
  $data['labour_force_survey_regions_employment'] = querySSoT('labour_force_survey_regional_employment?region=neq.british_columbia');
  $data['labour_force_survey_regional_industry_region'] = querySSoT('labour_force_survey_regional_industry_region')[0];
  $data['labour_force_survey_regional_industry_province'] = querySSoT('labour_force_survey_regional_industry_province');
  $data['industry_outlook'] = querySSoT('industry_outlook');
  $data['regional_top_industries'] = querySSoT('regional_top_industries?region=eq.' . $region);
  $data['regional_top_occupations'] = querySSoT('regional_top_occupations?region=eq.' . $region);
  $monthly_labour_market_updates = querySSoT('monthly_labour_market_updates');
  $latest = ssotLatestMonthlyLabourMarketUpdate($monthly_labour_market_updates);
  $data['monthly_labour_market_updates'] = $monthly_labour_market_updates[$latest];
  $data['sources'] = ssotSources();
  $data['schema'] = ssotSchema();
  $data['region'] = $region;
  return $data;
}



function ssotRegionProfile($region) {

  $region = ssotRegionKey($region);
  $data = array();

  $data['population'] = querySSoT('population?region=eq.' . $region)[0];
  $data['regional_labour_market_outlook'] = querySSoT('regional_labour_market_outlook?region=eq.' . $region)[0];
  $data['labour_force_survey_regional_employment'] = querySSoT('labour_force_survey_regional_employment?region=eq.' . $region)[0];
  $data['labour_force_survey_bc_employment'] = querySSoT('labour_force_survey_regional_employment?region=eq.british_columbia')[0];
  $data['labour_force_survey_regional_industry_region'] = querySSoT('labour_force_survey_regional_industry_region?region=eq.' . $region)[0];
  $data['labour_force_survey_regional_industry_province'] = querySSoT('labour_force_survey_regional_industry_province');
  $data['industry_outlook'] = querySSoT('industry_outlook');
  $data['regional_top_industries'] = querySSoT('regional_top_industries?region=eq.' . $region);
  $data['regional_top_occupations'] = querySSoT('regional_top_occupations?region=eq.' . $region);
  $monthly_labour_market_updates = querySSoT('monthly_labour_market_updates');
  $latest = ssotLatestMonthlyLabourMarketUpdate($monthly_labour_market_updates);
  $data['monthly_labour_market_updates'] = $monthly_labour_market_updates[$latest];
  $data['sources'] = ssotSources();
  $data['schema'] = ssotSchema();
  $data['region'] = $region;
  return $data;
}


function ssotIndustryProfile($industry) {
  $data = array();
  $data['industry_outlook'] = querySSoT('industry_outlook?industry=eq.' . $industry)[0];
  $data['labour_force_survey_industry'] = querySSoT('labour_force_survey_industry?industry=eq.' . $industry)[0];
  $data['monthly_labour_market_updates'] = querySSoT('monthly_labour_market_updates');
  $data['openings_industry'] = querySSoT('openings_industry?industry=eq.' . $industry);
  $data['sources'] = ssotSources();
  $data['schema'] = ssotSchema();
  return $data;
}

function ssotCareerProfile($noc) {
  $data = array();
  $data['wages'] = querySSoT('wages?noc=eq.' . $noc)[0];
  $data['career_provincial'] = querySSoT('career_provincial?noc=eq.' . $noc)[0];
  $data['career_regional'] = querySSoT('career_regional?noc=eq.' . $noc)[0];
  $data['census'] = querySSoT('census?noc=eq.' . $noc)[0];
  $data['education'] = querySSoT('education?noc=eq.' . $noc)[0];
  $data['skills'] = querySSoT('skills?noc=eq.' . $noc);
  $data['openings_careers'] = querySSoT('openings_careers?noc=eq.' . $noc)[0];
  $data['high_opportunity_occupations'] = querySSoT('high_opportunity_occupations?noc=eq.' . $noc);
  $data['occupational_interests'] = querySSoT('occupational_interests?noc=eq.' . $noc);
  $data['sources'] = ssotSources();
  $data['schema'] = ssotSchema();
  return $data;
}


function ssotParseDateRange($schema, $section, $field = "") {

  $match = "";
  if (isset($schema['definitions'][$section]['properties'][$field]['description'])) {
    $text = $schema['definitions'][$section]['properties'][$field]['description'];
    preg_match('#\{(.*?)\}#', $text, $match);
  }
  else if (isset($schema['definitions'][$section]['description'])) {
    $text = $schema['definitions'][$section]['description'];
    preg_match('#\{(.*?)\}#', $text, $match);
  }
  return empty($match) ? "" : $match[1];
}

function ssotSchema() {
  $schema = querySSoT("");
  return $schema;
}

function ssotSources() {
  $sources = querySSoT('sources');
  if (!$sources) return [];

  return array_reduce($sources, function($ret, $source) {
    $ret[$source['endpoint']] = $source;
    return $ret;
  }, []);
}

function querySSoT($url, $read_timeout = NULL) {
  $ssot = rtrim(\Drupal::config('workbc')->get('ssot_url'), '/');
  $client = new Client();
  try {
    $options = [];
    if ($read_timeout) {
      $options['read_timeout'] = $read_timeout;
    }
    $response = $client->get($ssot . '/' . $url, $options);
    $result = json_decode($response->getBody(), TRUE);
    return $result;
  }
  catch (RequestException $e) {
    \Drupal::logger('workbc_extra_fields')->error($e->getMessage());
    return NULL;
  }
}


function workbc_extra_fields_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['library'][] = 'workbc_extra_fields/extra-fields';
}

function ssotLatestMonthlyLabourMarketUpdate($sourceData) {
  $latestKey = "000000";
  $latestIdx = 0;
  foreach ($sourceData as $idx => $data) {
    $key = $data['year'] . str_pad($data['month'], 2, "0", STR_PAD_LEFT);
    if ($key > $latestKey) {
      $latestKey = $key;
      $latestIdx = $idx;
    }
  }
  return $latestIdx;
}


function ssotRegions() {
  static $regions = array(
    "cariboo" => REGION_CARIBOO,
    "kootenay" => REGION_KOOTENAY,
    "northeast" => REGION_NORTHEAST,
    "mainland_southwest" => REGION_MAINLAND_SOUTHWEST,
    "thompson_okanagan" => REGION_THOMPSON_OKANAGAN,
    "vancouver_island_coast" => REGION_VANCOUVER_ISLAND_COAST,
    "north_coast_nechako" => REGION_NORTH_COAST_NECHAKO,
    "british_columbia" => REGION_BRITISH_COLUMBIA,
  );

  return $regions;
}



function ssotRegionKey($region) {
  $key = array_search ($region, ssotRegions());
  return $key;
}

function ssotRegionName($machine_name) {
  $regions = ssotRegions();
  return isset($regions[$machine_name]) ? $regions[$machine_name] : "";
}

function ssotRegionLinks() {
  static $region_links = array(
    "cariboo" => "/region-profile/cariboo",
    "kootenay" => "/region-profile/kootenay",
    "northeast" => "/region-profile/northeast",
    "mainland_southwest" => "/region-profile/mainlandsouthwest",
    "thompson_okanagan" => "/region-profile/thompson-okanagan",
    "vancouver_island_coast" => "/region-profile/vancouver-islandcoast",
    "north_coast_nechako" => "/region-profile/north-coast-and-nechako",
    "british_columbia" => "/region-profile/british-columbia",
  );

  return $region_links;
}

function ssotRegionLink($machine_name) {
  $regions = ssotRegionLinks();
  return isset($regions[$machine_name]) ? $regions[$machine_name] : "";
}

function ssotProcessEmploymentIndustry($ssotdata) {

  if (empty($ssotdata)) {
    return [];
  }

  $industries = ssotIndustries();
  $sectors = ssotIndustrySectors();

  $data = [];
  foreach ($industries as $key => $name) {
    $nid = \Drupal::entityQuery('node')
      ->condition('title', $name)
      ->sort('nid', 'DESC')
      ->execute();
    $nid = reset($nid);

    $data[] = array(
      'key' => $key,
      'name' => $name,
      'share' => $ssotdata[$key],
      'sector' => $sectors[$key],
      'employment' => $ssotdata[$key."_num"],
      'link' => \Drupal::service('path_alias.manager')->getAliasByPath('/node/'. $nid),
    );
  }

  return $data;
}

function ssotIndustries() {

  static $industries = array(
    'accommodation_food_services' => 'Accommodation And Food Services',
    'agriculture_fishing' => 'Agriculture And Fishing',
    'business_building_other_support_services' => 'Business, Building And Other Support Services',
    'construction' => 'Construction',
    'educational_services' => 'Educational Services',
    'finance_insurance_real_estate' => 'Finance, Insurance And Real Estate',
    'forestry_logging_support_activities' => 'Forestry, Logging And Support Activities',
    'health_care_social_assistance' => 'Health Care And Social Assistance',
    'information_culture_recreation' => 'Information, Culture And Recreation',
    'manufacturing' => 'Manufacturing',
    'mining_oil_gas_extraction' => 'Mining And Oil And Gas Extraction',
    'other_private_services' => 'Repair, Personal And Non-Profit Services',
    'professional_scientific_technical_services' => 'Professional, Scientific And Technical Services',
    'public_administration' => 'Public Administration',
    'retail_trade' => 'Retail Trade',
    'transportation_warehousing' => 'Transportation And Warehousing',
    'utilities' => 'Utilities',
    'wholesale_trade' => 'Wholesale Trade',
  );
  return $industries;
}

function ssotIndustrySectors() {

  static $industries = array(
    'accommodation_food_services' => 'Services',
    'agriculture_fishing' => 'Goods',
    'business_building_other_support_services' => 'Services',
    'construction' => 'Goods',
    'educational_services' => 'Services',
    'finance_insurance_real_estate' => 'Services',
    'forestry_logging_support_activities' => 'Goods',
    'health_care_social_assistance' => 'Services',
    'information_culture_recreation' => 'Services',
    'manufacturing' => 'Goods',
    'mining_oil_gas_extraction' => 'Goods',
    'other_private_services' => 'Services',
    'professional_scientific_technical_services' => 'Services',
    'public_administration' => 'Services',
    'retail_trade' => 'Services',
    'transportation_warehousing' => 'Services',
    'utilities' => 'Goods',
    'wholesale_trade' => 'Services',
  );
  return $industries;
}

function ssotIndustryName($machine_name) {

  $industries = ssotIndustries();
  return isset($industries[$machine_name]) ? $industries[$machine_name] : "";
}

function ssotFormat($number, $decimals = 0, $suffix = "") {

  if ($number===0||$number) {
    $result = ssotFormatNumber(floatval($number), $decimals) . $suffix;
  }
  else {
    $result = WORKBC_EXTRA_FIELDS_NOT_AVAILABLE;
  }
  return $result;
}


/*
   custom number format function to add '+' if required
   additional check to set value to 0 if null
   additional special case for zero (no decimals)
 */
function ssotFormatNumber($number, $decimals = 0, $positive = false) {

  $number = is_null($number) ? 0 : $number;
  if (abs($number) > PHP_FLOAT_EPSILON) {
    $value = number_format($number, $decimals);
  }
  else {
    $value = "0";
  }
  if ($positive && $number > 0) {
    $value = "+" . $value;
  }
  return $value;
}


/**
 * Get Current and Previous Month Year.
 */

function ssotGetPreviousMonthYear($currentMonth, $currentYear) {

    if(empty($currentMonth) || empty($currentYear)){
      return;
    }
    //month
    $currentMonthName = date ('F', mktime(0, 0, 0, $currentMonth, 10));

    //current month and year
    $data['current_month_year'] = $currentMonthName . ' ' . $currentYear;

    //current month and previous year
    $previousYear = $currentYear - 1;
    $data['current_month_previous_year'] = $currentMonthName . ' ' . $previousYear;

    //previous month and previous year
    $previousMonth = $currentMonth - 1;
    $previousYear = $currentYear;
    if($previousMonth == 0) {
      $previousMonth = 12;
      $previousYear = $currentYear - 1;
    }
    $previousMonthName =  date ('F', mktime(0, 0, 0, $previousMonth, 10));
    $data['previous_month_year'] = $previousMonthName. ' ' . $previousYear;

    return $data;
}

/*
   populate view results with SSoT data here so API is called only
   once per row.
 */

function workbc_extra_fields_views_pre_render(ViewExecutable $view) {

  if ($view->id() == "industry_profiles") {
    foreach($view->result as $key => $result) {
      $view->result[$key]->ssot_data = ssotIndustryProfile($result->node_field_data_title);
    }
  }
}

function workbc_extra_fields_cron() {
  epbcSetPrograms();
}


function epbcGetPrograms($nocid) {

  $data = \Drupal::state()->get('epbc_education_programs', []);
  if (empty($data)) {
    epbcSetPrograms();
    $data = \Drupal::state()->get('epbc_education_programs', []);
  }
  $programs = [];
  if (isset($data[$nocid])) {
    $programs = $data[$nocid];
  }
  return $programs;
}


function epbcSetPrograms() {

  if (!extension_loaded("soap")) {
    \Drupal::logger('workbc_extra_fields')->warning("SOAP extension not loaded. Cannot pull program data from Education Planner BC.");
    return;
  }

  $client = new \SoapClient("https://ws.educationplannerbc.ca/ProgramsWebService3.asmx?wsdl");

  $epbcData = [];

  $subjects = $client->getSubjectAreas();

  $result = $client->getNocs();
  $nocs = $result->GetNocsResult->Nocs->Nocs;
  foreach ($nocs as $noc) {
    $programs = [];
    if (isset($noc->Subjectareas->Subjectarea)) {
      $areaIDs = [];
      if (is_array($noc->Subjectareas->Subjectarea)) {
        foreach ($noc->Subjectareas->Subjectarea as $area) {
          $areaIDs[] = $area->SubjectareaID;
        }
      }
      else {
        $areaIDs[] = $noc->Subjectareas->Subjectarea->SubjectareaID;
      }

      foreach ($subjects->GetSubjectareasResult->Subjectareas->Subjectarea as $area) {
        if (in_array($area->SubjectareaID, $areaIDs)) {
          $programs[] = $area->SubjectareaLabel;
        }
      }
    }
    $epbcData[$noc->Noc] = $programs;
  }
  \Drupal::state()->set('epbc_education_programs', $epbcData);
  \Drupal::logger('workbc_extra_fields')->notice("Pulled latest program data from Education Planner BC.");
}
