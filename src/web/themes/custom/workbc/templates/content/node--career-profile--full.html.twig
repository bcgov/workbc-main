{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}

{% set title = label %}
{% set hero_image = content.field_hero_image[0] %}
{% set hero_text = null %}
{% set hero_noc = content.field_noc['#items'].getString() %} 
{% set hero_hoo = content.extra_field_high_opportunity_occupation[0]['#markup'] %}

{% set statistic_annual_salary = content.extra_field_annual_salary %}
{% set statistic_annual_salary_source = content.extra_field_annual_salary_source %}
{% set statistic_minimum_education = content.extra_field_minimum_education %}
{% set statistic_job_openings = content.extra_field_job_openings %}
{% set statistic_job_openings_source = content.extra_field_job_openings_source %}

{% set career_profile_tabbed_content = content.group_career_profile_tabs %}

{% set career_videos_introduction = content.field_career_videos_introduction %}
{% set career_videos = content.field_career_videos %}
{% set links = content.links %}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'workbc-career-profile',
  ]
%}

{% set container_attributes = create_attribute() %}

{# When breadcrums are displayed below the hero section #}
{{ drupal_block('system_breadcrumb_block', wrapper=false) }}

{% if hero_image or hero_text %}
  <div class="hero-banner hero-banner-profile">

    <div class="hero-image-wrapper">
        <div class="hero-image-overlay"></div>
        {{ hero_image }}
    </div>

    <div class="container-lg">
        <div class="hero-content-wrapper">
          <div class="hero-title">
              <h1>{{ title }}</h1>
          </div>

          <div class="hero-noc">(NOC {{ hero_noc }})</div>

          {% if hero_hoo %}
              <div class="hero-hoo">
                <img src="/{{ directory }}/assets/images/hoo-icon.svg" alt="{{ 'High opportunity occupation'|t }}" />
                <span>High opportunity occupation</span>
              </div>
          {% endif %}

          <div class="hero-content">
              {{ hero_text }}
          </div>
        </div>
    </div>

  </div>
{% endif %}

<article{{ attributes.addClass(classes) }}>

  {% include '@workbc/includes/social-sharing.html.twig' %}

  <div class="career-statistics-wrapper">
    <div class="container-lg profile-information-card-deck">
      <div class="profile-information-card">
        <div class="profile-information-card-icon">
          icon
        </div>
        <div class="profile-information-card-description">
          {{ statistic_annual_salary['#title'] }}
        </div>
        <div class="profile-information-card-content">
          {{ statistic_annual_salary.0['#markup'] }}
        </div>
        <div class="profile-information-card-infotip">
          {{ statistic_annual_salary_source.0['#markup'] }}
        </div>
      </div>

      <div class="profile-information-card">
        <div class="profile-information-card-icon">
          icon
        </div>
        <div class="profile-information-card-description">
          {{ statistic_minimum_education['#title'] }}
        </div>
        <div class="profile-information-card-content">
          {{ statistic_minimum_education.0['#markup'] }}
        </div>
        <div class="profile-information-card-infotip">
        </div>
      </div>

      <div class="profile-information-card">
        <div class="profile-information-card-icon">
          icon
        </div>
        <div class="profile-information-card-description">
          {{ statistic_job_openings['#title'] }}
        </div>
        <div class="profile-information-card-content">
          {{ statistic_job_openings.0['#markup'] }}
        </div>
        <div class="profile-information-card-infotip">
          {{ statistic_job_openings_source.0['#markup'] }}
        </div>
      </div>

    </div>
  </div>

  <div class="career-details-wrapper">
    <div class="container-lg">
      {{ career_profile_tabbed_content }}
    </div>
  </div>

  <div class="career-videos-wrapper">
    <div class="container-lg">
      <h2>{{ career_videos_introduction }}</h2>
      {{ career_videos }}
    </div>
  </div>

  <div class="career-recent-jobs-wrapper">
    <div class="container-lg">
      Recent Jobs Placeholder (desktop sidebar)
      {{ links }}
    </div>
  </div>

</article>

{% if related|striptags|trim %}
  <div class="container-lg px-1">
    {{ related }}
  </div>
{% endif %}


{# {{ kint(content) }} #}
{# <div class="raw-content">
  {{ content }}
</div> #}