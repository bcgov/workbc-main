<?php

/**
 * @file
 * WorkBC theme file.
 */

/**
 * Implements hook theme_preprocess_paragraph().
 */
function workbc_preprocess_paragraph(&$variables) {
    $parent = $variables['paragraph']->getParentEntity();
    if ($parent->bundle() == "action_cards_full_width") {
      $align = $parent->field_alignment->value;
      $list = $parent->field_action_cards->getValue();
      foreach($list as $key => $item) {
        if ($item["target_id"] == $variables['paragraph']->id()) {
          if ($key % 2 == 0) {
            $variables['full_width_image_alignment'] = $align == "left" ? "left" : "right";
          }
          else {
            $variables['full_width_image_alignment'] = $align == "left" ? "right" : "left";
          }
        }
      }
    }
}

/**
 * Implements hook_form_alter().
 */
function workbc_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-search-career-profiles-page-1' or $form['#id'] == 'views-exposed-form-search-site-content-page-1') {
    $form['#attributes']['class'][] = 'search-form';
  }
}

/**
 * Implements hook theme_preprocess_page().
 */
function workbc_preprocess_page(&$variables) {
  // default page format
  $variables['page_format'] = "standard";
  if (isset($variables['node'])) {
    $node = $variables['node'];
    if ($node instanceof \Drupal\node\NodeInterface) {
      if ($node->bundle() == "page") {
        if ($node->hasField('field_page_format') && !$node->get('field_page_format')->isEmpty()) {
          $variables['page_format'] = $node->get("field_page_format")->getString();
        }
      }
    }
  }
}

/**
 * Prepares "view_base_path" variables for unformatted summary view templates
 * for use with glossary All option.
 */
function workbc_preprocess_views_view_summary_unformatted(&$variables) {

  $view = $variables['view'];
  $variables['view_base_path'] = $view->getPath();
}


/**
 * Prepares variables for media templates.
 *
 * Default template: media.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - media: An individual media for display.
 */
function mytheme_preprocess_media(&$variables) {
  /** @var \Drupal\media_entity\MediaInterface $media */
  $media = $variables['elements']['#media'];

  $variables['media'] = $media;
  $variables['name'] = $media->label();

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
