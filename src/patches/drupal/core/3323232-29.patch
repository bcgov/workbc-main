diff --git a/core/modules/media_library/config/schema/media_library.schema.yml b/core/modules/media_library/config/schema/media_library.schema.yml
index 312f4ab607..bfc92b01e9 100644
--- a/core/modules/media_library/config/schema/media_library.schema.yml
+++ b/core/modules/media_library/config/schema/media_library.schema.yml
@@ -8,6 +8,9 @@ field.widget.settings.media_library_widget:
       sequence:
         type: string
         label: 'Media type ID'
+    form_mode:
+      type: string
+      label: 'Form mode'
 
 media_library.settings:
   type: config_object
diff --git a/core/modules/media_library/src/Form/AddFormBase.php b/core/modules/media_library/src/Form/AddFormBase.php
index 83742a3a17..12bbd058dd 100644
--- a/core/modules/media_library/src/Form/AddFormBase.php
+++ b/core/modules/media_library/src/Form/AddFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_library\Form;
 
+use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseDialogCommand;
 use Drupal\Core\Ajax\FocusFirstCommand;
@@ -19,6 +20,7 @@
 use Drupal\media\MediaInterface;
 use Drupal\media\MediaTypeInterface;
 use Drupal\media_library\Ajax\UpdateSelectionCommand;
+use Drupal\media_library\MediaLibraryState;
 use Drupal\media_library\MediaLibraryUiBuilder;
 use Drupal\media_library\OpenerResolverInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -135,12 +137,18 @@ public function buildForm(array $form, FormStateInterface $form_state) {
     $form['#prefix'] = '<div id="media-library-add-form-wrapper">';
     $form['#suffix'] = '</div>';
 
+    // The media library state includes the widget settings of the form.
+    $media_state = $this->getMediaLibraryState($form_state);
+
+    // Form mode to render the secondary edit phase after uploading any bundle.
+    $add_form_mode = $media_state->getFormModeId();
+
     // The media library is loaded via AJAX, which means that the form action
     // URL defaults to the current URL. However, to add media, we always need to
     // submit the form to the media library URL, not whatever the current URL
     // may be.
     $form['#action'] = Url::fromRoute('media_library.ui', [], [
-      'query' => $this->getMediaLibraryState($form_state)->all(),
+      'query' => $media_state->all(),
     ])->toString();
 
     // The form is posted via AJAX. When there are messages set during the
@@ -152,6 +160,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
 
     $form['#attributes']['class'] = [
       'js-media-library-add-form',
+      Html::getClass('media_library_form_mode--' . $add_form_mode),
     ];
 
     $added_media = $this->getAddedMediaItems($form_state);
@@ -191,7 +200,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
         ],
       ];
       foreach ($added_media as $delta => $media) {
-        $form['media'][$delta] = $this->buildEntityFormElement($media, $form, $form_state, $delta);
+        $form['media'][$delta] = $this->buildEntityFormElement($media, $form, $form_state, $delta, $add_form_mode);
       }
 
       $form['selection'] = $this->buildCurrentSelectionArea($form, $form_state);
@@ -245,11 +254,14 @@ abstract protected function buildInputElement(array $form, FormStateInterface $f
    *   The current form state.
    * @param int $delta
    *   The delta of the media item.
+   * @param string $add_form_mode
+   *   The machine name of the form mode valid for all media types enabled
+   *   on a specific field (defined in widget).
    *
    * @return array
    *   The element containing the required fields sub-form.
    */
-  protected function buildEntityFormElement(MediaInterface $media, array $form, FormStateInterface $form_state, $delta) {
+  protected function buildEntityFormElement(MediaInterface $media, array $form, FormStateInterface $form_state, int $delta, string $add_form_mode = MediaLibraryState::DEFAULT_FORM_MODE) {
     // We need to make sure each button has a unique name attribute. The default
     // name for button elements is 'op'. If the name is not unique, the
     // triggering element is not set correctly and the wrong media item is
@@ -313,7 +325,8 @@ protected function buildEntityFormElement(MediaInterface $media, array $form, Fo
       ];
     }
 
-    $form_display = EntityFormDisplay::collectRenderDisplay($media, 'media_library');
+    $form_display = EntityFormDisplay::collectRenderDisplay($media, $add_form_mode);
+
     // When the name is not added to the form as an editable field, output
     // the name as a fixed element to confirm the right file was uploaded.
     if (!$form_display->getComponent('name')) {
diff --git a/core/modules/media_library/src/Form/FileUploadForm.php b/core/modules/media_library/src/Form/FileUploadForm.php
index 2c0a81976d..35691b38bb 100644
--- a/core/modules/media_library/src/Form/FileUploadForm.php
+++ b/core/modules/media_library/src/Form/FileUploadForm.php
@@ -257,10 +257,16 @@ public function processUploadElement(array $element, FormStateInterface $form_st
   }
 
   /**
+   * Build the sub form for media entities, but modify base to slim it down.
+   *
+   * @see hideExtraSourceFieldComponents()
+   *
    * {@inheritdoc}
    */
-  protected function buildEntityFormElement(MediaInterface $media, array $form, FormStateInterface $form_state, $delta) {
-    $element = parent::buildEntityFormElement($media, $form, $form_state, $delta);
+  protected function buildEntityFormElement(MediaInterface $media, array $form, FormStateInterface $form_state, int $delta, string $add_form_mode = 'media_library'): array {
+    $element = parent::buildEntityFormElement($media, $form, $form_state, $delta, $add_form_mode);
+
+    // @todo $media->bundle is not part of MediaInterface.
     $source_field = $this->getSourceFieldName($media->bundle->entity);
     if (isset($element['fields'][$source_field])) {
       $element['fields'][$source_field]['widget'][0]['#process'][] = [static::class, 'hideExtraSourceFieldComponents'];
@@ -271,6 +277,9 @@ protected function buildEntityFormElement(MediaInterface $media, array $form, Fo
   /**
    * Processes an image or file source field element.
    *
+   * Removes the remove_button, preview, title, description and filename
+   * elements from the form.
+   *
    * @param array $element
    *   The entity form source field element.
    * @param \Drupal\Core\Form\FormStateInterface $form_state
@@ -358,6 +367,7 @@ protected function createFileItem(MediaTypeInterface $media_type) {
    * {@inheritdoc}
    */
   protected function prepareMediaEntityForSave(MediaInterface $media) {
+    // @todo $media->bundle is not part of MediaInterface.
     /** @var \Drupal\file\FileInterface $file */
     $file = $media->get($this->getSourceFieldName($media->bundle->entity))->entity;
     $file->setPermanent();
@@ -381,6 +391,7 @@ public function removeButtonSubmit(array $form, FormStateInterface $form_state)
     /** @var \Drupal\media\MediaInterface $removed_media */
     $removed_media = $form_state->get(['media', $delta]);
 
+    // @todo $media->bundle is not part of MediaInterface.
     $file = $removed_media->get($this->getSourceFieldName($removed_media->bundle->entity))->entity;
     if ($file instanceof FileInterface && empty($this->fileUsage->listUsage($file))) {
       $file->delete();
diff --git a/core/modules/media_library/src/MediaLibraryState.php b/core/modules/media_library/src/MediaLibraryState.php
index 6e1773073c..afb3a3e64b 100644
--- a/core/modules/media_library/src/MediaLibraryState.php
+++ b/core/modules/media_library/src/MediaLibraryState.php
@@ -27,6 +27,8 @@
  * - media_library_selected_type: The media library contains tabs to navigate
  *   between the different media types. The selected type contains the ID of the
  *   media type whose tab that should be opened.
+ * - media_library_form_mode: form mode machine name valid for all media types
+ *   enabled on this specific field (or 'default' will be used).
  * - media_library_remaining: When the opener wants to limit the amount of media
  *   items that can be selected, it can pass the number of remaining slots. When
  *   the number of remaining slots is a negative number, an unlimited amount of
@@ -41,14 +43,25 @@
  */
 class MediaLibraryState extends ParameterBag implements CacheableDependencyInterface {
 
+  public const DEFAULT_FORM_MODE = 'media_library';
+
   /**
    * {@inheritdoc}
    */
   public function __construct(array $parameters = []) {
-    $this->validateRequiredParameters($parameters['media_library_opener_id'], $parameters['media_library_allowed_types'], $parameters['media_library_selected_type'], $parameters['media_library_remaining']);
     $parameters += [
+      'media_library_form_mode' => self::DEFAULT_FORM_MODE,
       'media_library_opener_parameters' => [],
     ];
+
+    $this->validateRequiredParameters(
+      $parameters['media_library_opener_id'],
+      $parameters['media_library_allowed_types'],
+      $parameters['media_library_selected_type'],
+      $parameters['media_library_remaining'],
+      $parameters['media_library_form_mode'],
+    );
+
     parent::__construct($parameters);
     $this->set('hash', $this->getHash());
   }
@@ -67,17 +80,24 @@ public function __construct(array $parameters = []) {
    *   library.
    * @param array $opener_parameters
    *   (optional) Any additional opener-specific parameter values.
+   * @param string|null $form_mode
+   *   (optional) The form_mode machine name for the add media form.
    *
    * @return static
    *   A state object.
    */
-  public static function create($opener_id, array $allowed_media_type_ids, $selected_type_id, $remaining_slots, array $opener_parameters = []) {
+  public static function create($opener_id, array $allowed_media_type_ids, $selected_type_id, $remaining_slots, array $opener_parameters = [], ?string $form_mode = self::DEFAULT_FORM_MODE) {
+    // When form_mode is passed explicitly as null, defaulting doesn't happen:
+    if (is_null($form_mode)) {
+      $form_mode = self::DEFAULT_FORM_MODE;
+    }
     $state = new static([
       'media_library_opener_id' => $opener_id,
       'media_library_allowed_types' => $allowed_media_type_ids,
       'media_library_selected_type' => $selected_type_id,
       'media_library_remaining' => $remaining_slots,
       'media_library_opener_parameters' => $opener_parameters,
+      'media_library_form_mode' => $form_mode,
     ]);
     return $state;
   }
@@ -104,7 +124,8 @@ public static function fromRequest(Request $request) {
       $query->all('media_library_allowed_types'),
       $query->get('media_library_selected_type'),
       $query->get('media_library_remaining'),
-      $query->all('media_library_opener_parameters')
+      $query->all('media_library_opener_parameters'),
+      $query->get('media_library_form_mode')
     );
 
     // The request parameters need to contain a valid hash to prevent a
@@ -132,12 +153,18 @@ public static function fromRequest(Request $request) {
    * @param int $remaining_slots
    *   The number of remaining items the user is allowed to select or add in the
    *   library.
+   * @param string|null $form_mode
+   *   The form_mode machine name for the add media form.
    *
    * @throws \InvalidArgumentException
    *   If one of the passed arguments is missing or does not pass the
    *   validation.
    */
-  protected function validateRequiredParameters($opener_id, array $allowed_media_type_ids, $selected_type_id, $remaining_slots) {
+  protected function validateRequiredParameters($opener_id, array $allowed_media_type_ids, $selected_type_id, $remaining_slots, ?string $form_mode = self::DEFAULT_FORM_MODE) {
+    // When form_mode is passed explicitly as null, defaulting doesn't happen:
+    if (is_null($form_mode)) {
+      $form_mode = self::DEFAULT_FORM_MODE;
+    }
     // The opener ID must be a non-empty string.
     if (!is_string($opener_id) || empty(trim($opener_id))) {
       throw new \InvalidArgumentException('The opener ID parameter is required and must be a string.');
@@ -157,6 +184,10 @@ protected function validateRequiredParameters($opener_id, array $allowed_media_t
     if (!is_string($selected_type_id) || empty(trim($selected_type_id))) {
       throw new \InvalidArgumentException('The selected type parameter is required and must be a string.');
     }
+    // The form mode must be a non-empty valid machine name string.
+    if (trim($form_mode) === '' || preg_match('@[^a-z0-9_]@', $form_mode)) {
+      throw new \InvalidArgumentException('The form mode parameter is required and must be a valid string.');
+    }
     // The selected type ID must be present in the list of allowed types.
     if (!in_array($selected_type_id, $allowed_media_type_ids, TRUE)) {
       throw new \InvalidArgumentException('The selected type parameter must be present in the list of allowed types.');
@@ -189,6 +220,7 @@ public function getHash() {
       $this->getSelectedTypeId(),
       $this->getAvailableSlots(),
       serialize($opener_parameters),
+      $this->getFormModeId(),
     ]);
 
     return Crypt::hmacBase64($hash, \Drupal::service('private_key')->get() . Settings::getHashSalt());
@@ -237,6 +269,21 @@ public function getSelectedTypeId() {
     return $this->get('media_library_selected_type');
   }
 
+  /**
+   * Returns the form mode for the media's add/edit media form.
+   *
+   * This is the (sub)form displayed after the media is added (e.g. after
+   * upload, for the FileUploadForm), that is embedded within the media_library
+   * selection form. The same form_mode is used for every media bundle the
+   * field accepts.
+   *
+   * @return string
+   *   The form mode machine id.
+   */
+  public function getFormModeId() {
+    return $this->get('media_library_form_mode');
+  }
+
   /**
    * Determines if additional media items can be selected.
    *
diff --git a/core/modules/media_library/src/MediaLibraryUiBuilder.php b/core/modules/media_library/src/MediaLibraryUiBuilder.php
index fb5d5c41c0..03fc751b93 100644
--- a/core/modules/media_library/src/MediaLibraryUiBuilder.php
+++ b/core/modules/media_library/src/MediaLibraryUiBuilder.php
@@ -239,7 +239,8 @@ protected function buildMediaTypeMenu(MediaLibraryState $state) {
 
     $selected_type_id = $state->getSelectedTypeId();
     foreach ($allowed_types as $allowed_type_id => $allowed_type) {
-      $link_state = MediaLibraryState::create($state->getOpenerId(), $state->getAllowedTypeIds(), $allowed_type_id, $state->getAvailableSlots(), $state->getOpenerParameters());
+      $link_state = MediaLibraryState::create($state->getOpenerId(), $state->getAllowedTypeIds(), $allowed_type_id, $state->getAvailableSlots(), $state->getOpenerParameters(), $state->getFormModeId());
+
       // Add the 'media_library_content' parameter so the response will contain
       // only the updated content for the tab.
       // @see self::buildUi()
@@ -310,7 +311,8 @@ protected function buildMediaTypeAddForm(MediaLibraryState $state) {
       $state->remove('_media_library_form_rebuild');
     }
     $form_state->set('media_library_state', $state);
-    return $this->formBuilder->buildForm($plugin_definition['forms']['media_library_add'], $form_state);
+    $form_class = $plugin_definition['forms']['media_library_add'];
+    return $this->formBuilder->buildForm($form_class, $form_state);
   }
 
   /**
diff --git a/core/modules/media_library/src/Plugin/Field/FieldWidget/MediaLibraryWidget.php b/core/modules/media_library/src/Plugin/Field/FieldWidget/MediaLibraryWidget.php
index abecd54dc1..1394543b8c 100644
--- a/core/modules/media_library/src/Plugin/Field/FieldWidget/MediaLibraryWidget.php
+++ b/core/modules/media_library/src/Plugin/Field/FieldWidget/MediaLibraryWidget.php
@@ -9,6 +9,7 @@
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Ajax\ReplaceCommand;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -66,6 +67,13 @@ class MediaLibraryWidget extends WidgetBase implements TrustedCallbackInterface
    */
   protected $moduleHandler;
 
+  /**
+   * The entity display repository.
+   *
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   */
+  protected $entityDisplayRepository;
+
   /**
    * Constructs a MediaLibraryWidget widget.
    *
@@ -85,12 +93,15 @@ class MediaLibraryWidget extends WidgetBase implements TrustedCallbackInterface
    *   The current active user.
    * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
    *   The module handler.
+   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   *   The entity display repository.
    */
-  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user, ModuleHandlerInterface $module_handler) {
+  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user, ModuleHandlerInterface $module_handler, EntityDisplayRepositoryInterface $entity_display_repository) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings);
     $this->entityTypeManager = $entity_type_manager;
     $this->currentUser = $current_user;
     $this->moduleHandler = $module_handler;
+    $this->entityDisplayRepository = $entity_display_repository;
   }
 
   /**
@@ -105,7 +116,8 @@ public static function create(ContainerInterface $container, array $configuratio
       $configuration['third_party_settings'],
       $container->get('entity_type.manager'),
       $container->get('current_user'),
-      $container->get('module_handler')
+      $container->get('module_handler'),
+      $container->get('entity_display.repository')
     );
   }
 
@@ -122,6 +134,7 @@ public static function isApplicable(FieldDefinitionInterface $field_definition)
   public static function defaultSettings() {
     return [
       'media_types' => [],
+      'form_mode' => MediaLibraryState::DEFAULT_FORM_MODE,
     ] + parent::defaultSettings();
   }
 
@@ -176,8 +189,18 @@ protected function getAllowedMediaTypeIdsSorted() {
    */
   public function settingsForm(array $form, FormStateInterface $form_state) {
     $elements = [];
-    $media_type_ids = $this->getAllowedMediaTypeIdsSorted();
 
+    $elements['form_mode'] = [
+      '#type' => 'select',
+      '#options' => $this->entityDisplayRepository->getFormModeOptions('media'),
+      '#title' => $this->t('Media Form mode'),
+      '#default_value' => $this->getSetting('form_mode'),
+      '#required' => TRUE,
+    ];
+
+    // Return $elements early if there aren't at least two types, as otherwise
+    // there's no selection to be made.
+    $media_type_ids = $this->getAllowedMediaTypeIdsSorted();
     if (count($media_type_ids) <= 1) {
       return $elements;
     }
@@ -263,6 +286,11 @@ public static function setMediaTypesValue(array &$element, $input, FormStateInte
   public function settingsSummary() {
     $summary = [];
     $media_type_labels = [];
+
+    $form_modes = $this->entityDisplayRepository->getFormModeOptions('media');
+    $mode = $this->getSetting('form_mode');
+    $summary[] = $this->t('Form mode: @mode', ['@mode' => $form_modes[$mode]]);
+
     $media_types = $this->entityTypeManager->getStorage('media_type')->loadMultiple($this->getAllowedMediaTypeIdsSorted());
     if (count($media_types) !== 1) {
       foreach ($media_types as $media_type) {
@@ -496,7 +524,9 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
         $opener_parameters['revision_id'] = (string) $entity->getRevisionId();
       }
     }
-    $state = MediaLibraryState::create('media_library.opener.field_widget', $allowed_media_type_ids, $selected_type_id, $remaining, $opener_parameters);
+
+    $form_mode = $this->getSetting('form_mode') ?? MediaLibraryState::DEFAULT_FORM_MODE;
+    $state = MediaLibraryState::create('media_library.opener.field_widget', $allowed_media_type_ids, $selected_type_id, $remaining, $opener_parameters, $form_mode);
 
     // Add a button that will load the Media library in a modal using AJAX.
     $element['open_button'] = [
diff --git a/core/modules/media_library/tests/modules/media_library_test_widget/config/schema/media_library_test_widget.schema.yml b/core/modules/media_library/tests/modules/media_library_test_widget/config/schema/media_library_test_widget.schema.yml
index 81186253e1..0e74387667 100644
--- a/core/modules/media_library/tests/modules/media_library_test_widget/config/schema/media_library_test_widget.schema.yml
+++ b/core/modules/media_library/tests/modules/media_library_test_widget/config/schema/media_library_test_widget.schema.yml
@@ -8,3 +8,6 @@ field.widget.settings.media_library_inception_widget:
       sequence:
         type: string
         label: 'Media type ID'
+    form_mode:
+      type: string
+      label: 'Form mode'
diff --git a/core/modules/media_library/tests/src/FunctionalJavascript/EmbeddedFormWidgetTest.php b/core/modules/media_library/tests/src/FunctionalJavascript/EmbeddedFormWidgetTest.php
index cb284610fa..351c12e6f6 100644
--- a/core/modules/media_library/tests/src/FunctionalJavascript/EmbeddedFormWidgetTest.php
+++ b/core/modules/media_library/tests/src/FunctionalJavascript/EmbeddedFormWidgetTest.php
@@ -5,6 +5,7 @@
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\media_library\MediaLibraryState;
 use Drupal\Tests\TestFileCreationTrait;
 
 /**
@@ -70,6 +71,7 @@ protected function setUp(): void {
         'region' => 'content',
         'settings' => [
           'media_types' => ['type_three'],
+          'form_mode' => MediaLibraryState::DEFAULT_FORM_MODE,
         ],
       ])
       ->save();
@@ -103,6 +105,7 @@ public function testInsertionAndReselection($widget) {
         'region' => 'content',
         'settings' => [
           'media_types' => ['type_three'],
+          'form_mode' => MediaLibraryState::DEFAULT_FORM_MODE,
         ],
       ])
       ->save();
diff --git a/core/modules/media_library/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php b/core/modules/media_library/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
index 54de6cb25e..66afebff14 100644
--- a/core/modules/media_library/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
+++ b/core/modules/media_library/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
@@ -181,10 +181,10 @@ public function testWidget() {
     $this->assertSame($link_titles, $expected_link_titles);
     $this->drupalGet('admin/structure/types/manage/basic_page/form-display');
 
-    // Ensure that the widget settings form is not displayed when only
+    // Ensure that the widget settings form is displayed even when only
     // one media type is allowed.
     $assert_session->pageTextContains('Single media type');
-    $assert_session->buttonNotExists('field_single_media_type_settings_edit');
+    $assert_session->buttonExists('field_single_media_type_settings_edit');
 
     $assert_session->buttonExists('field_twin_media_settings_edit')->press();
     $this->assertElementExistsAfterWait('css', '#field-twin-media .tabledrag-toggle-weight')->press();
diff --git a/core/modules/media_library/tests/src/FunctionalJavascript/WidgetAccessTest.php b/core/modules/media_library/tests/src/FunctionalJavascript/WidgetAccessTest.php
index c7a96e635b..4f0d7bd765 100644
--- a/core/modules/media_library/tests/src/FunctionalJavascript/WidgetAccessTest.php
+++ b/core/modules/media_library/tests/src/FunctionalJavascript/WidgetAccessTest.php
@@ -58,6 +58,9 @@ public function testWidgetAccess() {
     $role->revokePermission('view media');
     $role->save();
 
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
     // Create a working state.
     $allowed_types = ['type_one', 'type_two', 'type_three', 'type_four'];
     // The opener parameters are not relevant to the test, but the opener
@@ -66,7 +69,7 @@ public function testWidgetAccess() {
       'entity_type_id' => 'node',
       'bundle' => 'basic_page',
       'field_name' => 'field_unlimited_media',
-    ]);
+    ], $form_mode);
     $url_options = ['query' => $state->all()];
 
     // Verify that unprivileged users can't access the widget view.
diff --git a/core/modules/media_library/tests/src/Kernel/MediaLibraryAccessTest.php b/core/modules/media_library/tests/src/Kernel/MediaLibraryAccessTest.php
index 2b582a8263..0046f270ac 100644
--- a/core/modules/media_library/tests/src/Kernel/MediaLibraryAccessTest.php
+++ b/core/modules/media_library/tests/src/Kernel/MediaLibraryAccessTest.php
@@ -108,12 +108,18 @@ public function testFieldWidgetEntityCreateAccess() {
     /** @var \Drupal\media_library\MediaLibraryUiBuilder $ui_builder */
     $ui_builder = $this->container->get('media_library.ui_builder');
 
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
     // Create a media library state to test access.
-    $state = MediaLibraryState::create('media_library.opener.field_widget', ['file', 'image'], 'file', 2, [
+    $state = MediaLibraryState::create('media_library.opener.field_widget', [
+      'file',
+      'image',
+    ], 'file', 2, [
       'entity_type_id' => 'entity_test',
       'bundle' => 'test',
       'field_name' => 'field_test_media',
-    ]);
+    ], $form_mode);
 
     $access_result = $ui_builder->checkAccess($this->createUser(), $state);
     $this->assertAccess($access_result, FALSE, "The following permissions are required: 'administer entity_test content' OR 'administer entity_test_with_bundle content' OR 'create test entity_test_with_bundle entities'.", [], ['url.query_args', 'user.permissions']);
@@ -158,12 +164,16 @@ public function testEditorOpenerAccess($media_embed_enabled, $can_use_format) {
       $permissions[] = $format->getPermissionName();
     }
 
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
     $state = MediaLibraryState::create(
       'media_library.opener.editor',
       ['image'],
       'image',
       1,
-      ['filter_format_id' => $format->id()]
+      ['filter_format_id' => $format->id()],
+      $form_mode
     );
 
     $access_result = $this->container
@@ -213,13 +223,23 @@ public function testFieldWidgetEntityEditAccess() {
     ]);
     $forbidden_entity->save();
 
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
     // Create a media library state to test access.
-    $state = MediaLibraryState::create('media_library.opener.field_widget', ['file', 'image'], 'file', 2, [
-      'entity_type_id' => $forbidden_entity->getEntityTypeId(),
-      'bundle' => $forbidden_entity->bundle(),
-      'field_name' => 'field_test_media',
-      'entity_id' => $forbidden_entity->id(),
-    ]);
+    $state = MediaLibraryState::create(
+      'media_library.opener.field_widget',
+      ['file', 'image'],
+      'file',
+      2,
+      [
+        'entity_type_id' => $forbidden_entity->getEntityTypeId(),
+        'bundle' => $forbidden_entity->bundle(),
+        'field_name' => 'field_test_media',
+        'entity_id' => $forbidden_entity->id(),
+      ],
+      $form_mode
+    );
 
     $access_result = $ui_builder->checkAccess($this->createUser(), $state);
     $this->assertAccess($access_result, FALSE, NULL, [], ['url.query_args']);
@@ -239,7 +259,8 @@ public function testFieldWidgetEntityEditAccess() {
       $state->getAllowedTypeIds(),
       $state->getSelectedTypeId(),
       $state->getAvailableSlots(),
-      $parameters
+      $parameters,
+      $state->getFormModeId()
     );
 
     $access_result = $ui_builder->checkAccess($this->createUser(), $state);
@@ -302,12 +323,21 @@ public function testFieldWidgetEntityFieldAccess(string $field_type) {
     // so that we can be certain that field access is checked.
     $account = $this->createUser(['administer entity_test content']);
 
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
     // Test that access is denied even without an entity to work with.
-    $state = MediaLibraryState::create('media_library.opener.field_widget', ['file', 'image'], 'file', 2, [
-      'entity_type_id' => 'entity_test',
-      'bundle' => 'test',
-      'field_name' => $field_storage->getName(),
-    ]);
+    $state = MediaLibraryState::create(
+      'media_library.opener.field_widget',
+      ['file', 'image'],
+      'file',
+      2,
+      [
+        'entity_type_id' => 'entity_test',
+        'bundle' => 'test',
+        'field_name' => $field_storage->getName(),
+      ],
+      $form_mode);
     $access_result = $ui_builder->checkAccess($account, $state);
     $this->assertAccess($access_result, FALSE, 'Field access denied by test module', [], ['url.query_args', 'user.permissions']);
 
@@ -326,7 +356,8 @@ public function testFieldWidgetEntityFieldAccess(string $field_type) {
       $state->getAllowedTypeIds(),
       $state->getSelectedTypeId(),
       $state->getAvailableSlots(),
-      $parameters
+      $parameters,
+      $state->getFormModeId()
     );
     $access_result = $ui_builder->checkAccess($account, $state);
     $this->assertAccess($access_result, FALSE, 'Field access denied by test module', [], ['url.query_args', 'user.permissions']);
@@ -339,12 +370,21 @@ public function testViewAccess() {
     /** @var \Drupal\media_library\MediaLibraryUiBuilder $ui_builder */
     $ui_builder = $this->container->get('media_library.ui_builder');
 
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
     // Create a media library state to test access.
-    $state = MediaLibraryState::create('media_library.opener.field_widget', ['file', 'image'], 'file', 2, [
-      'entity_type_id' => 'entity_test',
-      'bundle' => 'test',
-      'field_name' => 'field_test_media',
-    ]);
+    $state = MediaLibraryState::create(
+      'media_library.opener.field_widget',
+      ['file', 'image'],
+      'file',
+      2,
+      [
+        'entity_type_id' => 'entity_test',
+        'bundle' => 'test',
+        'field_name' => 'field_test_media',
+      ],
+      $form_mode);
 
     // Create a clone of the view so we can reset the original later.
     $view_original = clone Views::getView('media_library');
@@ -401,17 +441,20 @@ public function testAddFormAccess(): void {
       $this->createMediaType('image')->id(),
     ];
 
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
     $account = $this->createUser(['create media']);
     $this->setCurrentUser($account);
 
     /** @var \Drupal\media_library\MediaLibraryUiBuilder $ui_builder */
     $ui_builder = $this->container->get('media_library.ui_builder');
 
-    $state = MediaLibraryState::create('test', $media_types, $media_types[0], 1);
+    $state = MediaLibraryState::create('test', $media_types, $media_types[0], 1, [], $form_mode);
     $build = $ui_builder->buildUi($state);
     $this->assertEmpty($build['content']['form']);
 
-    $state = MediaLibraryState::create('test', $media_types, $media_types[1], 1);
+    $state = MediaLibraryState::create('test', $media_types, $media_types[1], 1, [], $form_mode);
     $build = $ui_builder->buildUi($state);
     $this->assertNotEmpty($build['content']['form']);
   }
diff --git a/core/modules/media_library/tests/src/Kernel/MediaLibraryAddFormTest.php b/core/modules/media_library/tests/src/Kernel/MediaLibraryAddFormTest.php
index 02628d22bc..d77510705e 100644
--- a/core/modules/media_library/tests/src/Kernel/MediaLibraryAddFormTest.php
+++ b/core/modules/media_library/tests/src/Kernel/MediaLibraryAddFormTest.php
@@ -112,7 +112,10 @@ public function testMediaTypeAddForm() {
    *   The render array for the media library.
    */
   protected function buildLibraryUi($selected_type_id) {
-    $state = MediaLibraryState::create('test', ['image', 'remote_video'], $selected_type_id, -1);
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
+    $state = MediaLibraryState::create('test', ['image', 'remote_video'], $selected_type_id, -1, [], $form_mode);
     return \Drupal::service('media_library.ui_builder')->buildUi($state);
   }
 
@@ -130,7 +133,10 @@ public function testFormStateValidation() {
    * Tests the validation of the selected type in the media library add form.
    */
   public function testSelectedTypeValidation() {
-    $state = MediaLibraryState::create('test', ['image', 'remote_video', 'header_image'], 'header_image', -1);
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
+    $state = MediaLibraryState::create('test', ['image', 'remote_video', 'header_image'], 'header_image', -1, [], $form_mode);
     $form_state = new FormState();
     $form_state->set('media_library_state', $state);
     $this->expectException(\InvalidArgumentException::class);
diff --git a/core/modules/media_library/tests/src/Kernel/MediaLibraryStateTest.php b/core/modules/media_library/tests/src/Kernel/MediaLibraryStateTest.php
index bc4419a3b5..af0003f3b2 100644
--- a/core/modules/media_library/tests/src/Kernel/MediaLibraryStateTest.php
+++ b/core/modules/media_library/tests/src/Kernel/MediaLibraryStateTest.php
@@ -22,6 +22,11 @@ class MediaLibraryStateTest extends KernelTestBase {
 
   use MediaTypeCreationTrait;
 
+  /**
+   * @var \Drupal\media\MediaTypeInterface|string
+   */
+  protected $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
   /**
    * {@inheritdoc}
    */
@@ -71,14 +76,17 @@ public function testMethods() {
     $selected_media_type_id = 'image';
     $remaining_slots = 2;
 
-    $state = MediaLibraryState::create($opener_id, $allowed_media_type_ids, $selected_media_type_id, $remaining_slots);
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
+    $state = MediaLibraryState::create($opener_id, $allowed_media_type_ids, $selected_media_type_id, $remaining_slots, [], $form_mode);
     $this->assertSame($opener_id, $state->getOpenerId());
     $this->assertSame($allowed_media_type_ids, $state->getAllowedTypeIds());
     $this->assertSame($selected_media_type_id, $state->getSelectedTypeId());
     $this->assertSame($remaining_slots, $state->getAvailableSlots());
     $this->assertTrue($state->hasSlotsAvailable());
 
-    $state = MediaLibraryState::create($opener_id, $allowed_media_type_ids, $selected_media_type_id, 0);
+    $state = MediaLibraryState::create($opener_id, $allowed_media_type_ids, $selected_media_type_id, 0, [], $form_mode);
     $this->assertFalse($state->hasSlotsAvailable());
   }
 
@@ -105,7 +113,10 @@ public function testCreate($opener_id, array $allowed_media_type_ids, $selected_
       $this->expectException(\InvalidArgumentException::class);
       $this->expectExceptionMessage($exception_message);
     }
-    $state = MediaLibraryState::create($opener_id, $allowed_media_type_ids, $selected_type_id, $remaining_slots);
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
+    $state = MediaLibraryState::create($opener_id, $allowed_media_type_ids, $selected_type_id, $remaining_slots, [], $form_mode);
     $this->assertInstanceOf(MediaLibraryState::class, $state);
 
     // Ensure that the state object carries cache metadata.
@@ -279,9 +290,12 @@ public function providerCreate() {
    * @dataProvider providerFromRequest
    */
   public function testFromRequest(array $query_overrides, $exception_expected) {
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
     // Override the query parameters and verify an exception is thrown when
     // required state parameters are changed.
-    $query = MediaLibraryState::create('test', ['file', 'image'], 'image', 2)->all();
+    $query = MediaLibraryState::create('test', ['file', 'image'], 'image', 2, [], $form_mode)->all();
     $query = array_merge($query, $query_overrides);
     if ($exception_expected) {
       $this->expectException(BadRequestHttpException::class);
@@ -329,6 +343,7 @@ public function providerFromRequest() {
         'media_library_opener_id' => 'test',
         'media_library_allowed_types' => ['file', 'image'],
         'media_library_selected_type' => 'image',
+        'media_library_form_mode' => MediaLibraryState::DEFAULT_FORM_MODE,
         'media_library_remaining' => 2,
       ],
       FALSE,
@@ -372,9 +387,10 @@ public function providerFromRequest() {
    * @covers ::getOpenerParameters
    */
   public function testOpenerParameters() {
-    $state = MediaLibraryState::create('test', ['file'], 'file', -1, [
-      'foo' => 'baz',
-    ]);
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
+    $state = MediaLibraryState::create('test', ['file'], 'file', -1, ['foo' => 'baz'], $form_mode);
     $this->assertSame(['foo' => 'baz'], $state->getOpenerParameters());
   }
 
@@ -382,8 +398,11 @@ public function testOpenerParameters() {
    * Tests that hash is unaffected by allowed media type order.
    */
   public function testHashUnaffectedByMediaTypeOrder() {
-    $state1 = MediaLibraryState::create('test', ['file', 'image'], 'image', 2);
-    $state2 = MediaLibraryState::create('test', ['image', 'file'], 'image', 2);
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
+    $state1 = MediaLibraryState::create('test', ['file', 'image'], 'image', 2, [], $form_mode);
+    $state2 = MediaLibraryState::create('test', ['image', 'file'], 'image', 2, [], $form_mode);
     $this->assertSame($state1->getHash(), $state2->getHash());
   }
 
@@ -391,14 +410,11 @@ public function testHashUnaffectedByMediaTypeOrder() {
    * Tests that hash is unaffected by opener parameter order.
    */
   public function testHashUnaffectedByOpenerParamOrder() {
-    $state1 = MediaLibraryState::create('test', ['file'], 'file', -1, [
-      'foo' => 'baz',
-      'baz' => 'foo',
-    ]);
-    $state2 = MediaLibraryState::create('test', ['file'], 'file', -1, [
-      'baz' => 'foo',
-      'foo' => 'baz',
-    ]);
+    // @todo where should this be pulled from? The field widget specifies.
+    $form_mode = MediaLibraryState::DEFAULT_FORM_MODE;
+
+    $state1 = MediaLibraryState::create('test', ['file'], 'file', -1, ['foo' => 'baz', 'baz' => 'foo'], $form_mode);
+    $state2 = MediaLibraryState::create('test', ['file'], 'file', -1, ['baz' => 'foo', 'foo' => 'baz'], $form_mode);
     $this->assertSame($state1->getHash(), $state2->getHash());
   }
 
